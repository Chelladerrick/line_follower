// IR sensor pins
const int IR1 = 2;
const int IR2 = 3;
const int IR3 = 4;
const int IR4 = 5;
const int IR5 = 12;

// Motor PWM enable pins (replace with your actual PWM pins if needed)
const int enA = 9;
const int enB = 10;
// Motor direction pins
const int in1 = 6;
const int in2 = 7;
const int in3 = 8;
const int in4 = 11;

// PID constants
float Kp = 30;
float Ki = 0;
float Kd = 20;

float error = 0, previousError = 0, integral = 0;
int baseSpeed = 150;

void setup() {
  pinMode(IR1, INPUT);
  pinMode(IR2, INPUT);
  pinMode(IR3, INPUT);
  pinMode(IR4, INPUT);
  pinMode(IR5, INPUT);
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
 
}

void loop() {
  // Read sensor values (0 = black line, 1 = white background typically)
  int s1 = digitalRead(IR1);
  int s2 = digitalRead(IR2);
  int s3 = digitalRead(IR3);
  int s4 = digitalRead(IR4);
  int s5 = digitalRead(IR5);

  // Line Lost Condition
  if (s1 && s2 && s3 && s4 && s5) {
    stopAllMotors();
    return;
  }

  // Calculate error (centered at sensors IR3)
  // Weighted error using five sensors for more precision
  int position = s1 * -2 + s2 * -1 + s3 * 0 + s4 * 1 + s5 * 2;
  error = position;

  // PID calculation
  integral += error;
  float derivative = error - previousError;
  float output = Kp * error + Ki * integral + Kd * derivative;
  previousError = error;

  // Motor speed control
  int leftSpeed = constrain(baseSpeed - output, 0, 255);
  int rightSpeed = constrain(baseSpeed + output, 0, 255);

  moveMotors(leftSpeed, rightSpeed);
  delay(50); // Smaller delay for smoother control
}

void moveMotors(int left, int right) {
  analogWrite(enA, left);
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);

  analogWrite(enB, right);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
}

void stopAllMotors() {
  analogWrite(enA, 0);
  analogWrite(enB, 0);

  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
}
